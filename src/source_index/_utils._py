from serde_type import SerdeField, SerdeRecord
import clang.cindex as cl
import re

# https://cwoodall.com/posts/2018-02-24-using-clang-and-python-to-generate-cpp-struct-serde-fns/


def get_current_scope(cursor):
    parent = cursor.lexical_parent
    if parent.kind.is_declaration():
        return get_current_scope(parent) + [parent.spelling]
    else:
        return []


def find_serializable_types(tu, match_str="//\+serde\(([A-Za-z\s,_]*)\)"):
    match_types = [cl.CursorKind.STRUCT_DECL, cl.CursorKind.CLASS_DECL]
    tokens = tu.cursor.get_tokens()
    found = False
    serializables = []
    serdes = []
    for token in tokens:
        match = re.match(match_str, token.spelling)
        if found:
            cursor = cl.Cursor().from_location(tu, token.location)
            if cursor.kind in match_types:
                name = "::".join(get_current_scope(cursor) + [cursor.spelling])
                fields = [
                    SerdeField(
                        field.spelling, field.type.spelling, field.access_specifier.name
                    )
                    for field in cursor.type.get_fields()
                ]
                serializables.append(SerdeRecord(name, fields, serdes))
                found = False
                serdes = []
        elif (token.kind == cl.TokenKind.COMMENT) and match:
            serdes = [x.strip() for x in match.groups()[0].split(",")]
            found = True

    return serializables
